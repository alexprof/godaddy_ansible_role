# vim: ts=2 sw=2 et ft=ansible.yaml
---
# tasks file for opsguru.godaddy
- name: setup api_server_url
  set_fact:
    api_server_url: '{{api_server}}/v{{api_version}}/domains/{{domain_name}}/records'
    authorization:  'sso-key {{api_key}}:{{api_secret}}'

- name: setup godaddy dns record
  set_fact:
    godaddy_dns_record:
      name:           '{{record_name}}'
      data:           '{{record_data}}'
      type:           '{{type}}'
      ttl:            '{{ttl}}'

- name: update godaddy_dns_record with priority
  set_fact:
    godaddy_dns_record: '{{godaddy_dns_record|combine({"priority": priority})}}'
  when:
  - priority|default("", true)|length

- name: update godaddy_dns_record with service
  set_fact:
    godaddy_dns_record: '{{godaddy_dns_record|combine({"service": service})}}'
  when:
  - service|default("", true)|length

- name: update godaddy_dns_record with protocol
  set_fact:
    godaddy_dns_record: '{{godaddy_dns_record|combine({"protocol": protocol})}}'
  when:
  - protocol|default("", true)|length

- name: update godaddy_dns_record with port
  set_fact:
    godaddy_dns_record: '{{godaddy_dns_record|combine({"port": port})}}'
  when:
  - port|default("", true)|length

- name: update godaddy_dns_record with weight
  set_fact:
    godaddy_dns_record: '{{godaddy_dns_record|combine({"weight": weight})}}'
  when:
  - weight|default("", true)|length


- name: setup records_data_dict
  set_fact:
    body_dict: [ '{{godaddy_dns_record}}' ]

- name: setup record_data (json)
  set_fact:
    body: '{{body_dict|to_nice_json}}'

- name: print current api_server_url
  debug:
    var:        api_server_url
    verbosity:  3

- name: print body
  debug:
    var:        body
    verbosity:  3

- name: call godaddy api to get record
  uri:
    url:          '{{api_server_url}}/{{type}}/{{godaddy_record_name}}'
    method:       GET
    headers:
      Authorization: '{{authorization}}'
      Accept: 'application/json'
  register: dns_retrive

- name: setup current_record_data
  set_fact:
    current_record_data: "{{ dns_retrive.json | map(attribute='data') | join(', ') }}"

- name: setup current_type
  set_fact:
    current_type: "{{ dns_retrive.json | map(attribute='type') | join(', ') }}"

- name: call godaddy api to update record(s)
  uri:
    url:          '{{api_server_url}}/{{type}}/{{godaddy_record_name}}'
    method:       PUT
    body:         '{{body}}'
    body_format:  json
    headers:
      Authorization: '{{authorization}}'
      Accept: 'application/json'
  when: current_record_data != "" and (current_record_data != record_data or current_type != type)

- name: call godaddy api to create new record
  uri:
    url:          '{{api_server_url}}'
    method:       PATCH
    body:         '{{body}}'
    body_format:  json
    headers:
      Authorization: '{{authorization}}'
      Accept: 'application/json'
  when: current_record_data == ""
